name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for versioning

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Cache uv packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-py${{ matrix.python-version }}-
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv pip install setuptools wheel cython>=3.0.11

    - name: Build Cython extensions
      run: uv run python setup.py build_ext --inplace

    - name: Run tests
      run: uv run pytest -v

    - name: Check Cython compilation
      run: |
        uv run python -c "
        import os
        import box
        box_dir = os.path.dirname(box.__file__)
        so_files = [f for f in os.listdir(box_dir) if f.endswith('.so') or f.endswith('.pyd')]
        print(f'Found {len(so_files)} compiled Cython modules: {so_files}')
        "

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cython>=3.0.11 setuptools wheel cibuildwheel build

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        # Build for Python 3.9-3.13
        CIBW_BUILD: cp39-* cp310-* cp311-* cp312-* cp313-*
        CIBW_SKIP: "*-musllinux_*"
        # For macOS: Build universal2 (contains both x86_64 and arm64)
        CIBW_ARCHS_MACOS: universal2
        CIBW_ARCHS_LINUX: x86_64 aarch64
        CIBW_ARCHS_WINDOWS: AMD64
        CIBW_BEFORE_BUILD: pip install cython>=3.0.11 setuptools wheel
        CIBW_BUILD_VERBOSITY: 1
        # Run tests in the wheel
        CIBW_TEST_COMMAND: pytest {package}/test -v
        CIBW_TEST_REQUIRES: pytest msgpack tomli-w ruamel.yaml toml PyYAML

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cython>=3.0.11 setuptools build

    - name: Build source distribution
      run: python -m build --sdist

    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    name: Publish to PyPI
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    environment: release
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Flatten artifacts
      run: |
        mkdir -p dist
        find artifacts -name "*.whl" -exec cp {} dist/ \;
        find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  publish_test:
    name: Publish to Test PyPI
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Flatten artifacts
      run: |
        mkdir -p dist
        find artifacts -name "*.whl" -exec cp {} dist/ \;
        find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
